#!/bin/python3

import sys
import ipaddress
import routeros_api

# Defina as informações de conexão com o dispositivo MikroTik
router_ip = 'IPDOMIKROTIK'
router_username = 'USER'
router_password = 'SENHA'

# Defina as informações da sua rede local com múltiplos prefixos
redes_locais = [
    ipaddress.IPv4Network('192.168.1.0/24'),
    ipaddress.IPv4Network('10.0.0.0/8'),
    ipaddress.IPv4Network('172.16.0.0/12')
]

def connect_router():
    try:
        connection = routeros_api.RouterOsApiPool(
            router_ip, username=router_username, password=router_password,
            plaintext_login=True
        )
        return connection
    except Exception as e:
        print(f"Erro ao conectar ao MikroTik: {str(e)}")
        sys.exit(1)

def add_blackhole(ip_address):
    if is_local_ip(ip_address):
        print(f"O IP {ip_address} pertence a uma rede local e não pode ser adicionado à lista de blackhole.")
        return
    
    connection = connect_router()
    api = connection.get_api()
    routes = api.get_resource('/ip/route')
    
    try:
        routes.add(dst_address=ip_address, comment='Ban-Fail2Ban', blackhole='')
        print(f"O IP {ip_address} foi adicionado à lista de blackhole com sucesso.")
    except Exception as e:
        print(f"Erro ao adicionar o IP {ip_address} à lista de blackhole: {str(e)}")
    finally:
        connection.disconnect()

def remove_blackhole(ip_address):
    connection = connect_router()
    api = connection.get_api()
    routes = api.get_resource('/ip/route')
    
    try:
        blackhole_routes = routes.get(dst_address=ip_address)
        for route in blackhole_routes:
            routes.remove(id=route['id'])
        print(f"O IP {ip_address} foi removido da lista de blackhole com sucesso.")
    except Exception as e:
        print(f"Erro ao remover o IP {ip_address} da lista de blackhole: {str(e)}")
    finally:
        connection.disconnect()

def is_local_ip(ip_address):
    try:
        ip = ipaddress.IPv4Address(ip_address)
        return any(ip in rede for rede in redes_locais)
    except ValueError:
        return False

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Uso: python script.py add/remove IP_ADDRESS")
        sys.exit(1)

    action = sys.argv[1]
    ip_address = sys.argv[2]

    if action == 'add':
        add_blackhole(ip_address)
    elif action == 'remove':
        remove_blackhole(ip_address)
    else:
        print("Ação inválida. Use 'add' para adicionar ou 'remove' para remover.")

